{"data":{"site":{"siteMetadata":{"title":"DailyJSX","author":"Nadun Indunil"}},"markdownRemark":{"id":"964cba2b-6e4a-51d1-9bf9-234969180062","html":"<p>I was working on a Typescript project last few weeks and It was awesome to work with javascript with superpowers. One day I found that one node module doesn’t have types, which ultimately made me do the typings since I was so arrogant to ignore typings. This post will cover the whole process and how to contribute to DefinitelyTyped repo.</p>\n<p>First, find the Github repo named as <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">DefinitelyTyped</a> and fork the repo.</p>\n<p>Then clone the forked repo and create a new branch using the node module name you are going to contribute.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout -b <span class=\"token operator\">&lt;</span>module_name<span class=\"token operator\">></span></code></pre></div>\n<p>Then do</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span></code></pre></div>\n<p>Create a new folder inside the typings folder named after the node module name.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> <span class=\"token operator\">&lt;</span>module_name<span class=\"token operator\">></span></code></pre></div>\n<p>This folder should have four files</p>\n<table>\n<thead>\n<tr>\n<th>File Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>index.d.ts</td>\n<td>File where we add type definition for the node module</td>\n</tr>\n<tr>\n<td>module-tests.ts</td>\n<td>write tests for the typing</td>\n</tr>\n<tr>\n<td>tsconfig.json</td>\n<td>configurations for Typescript</td>\n</tr>\n<tr>\n<td>tslint.json</td>\n<td>linting for TS</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"indexdts\"><a href=\"#indexdts\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>index.d.ts</h2>\n<p>You can generate a base code for a typing definition file using dts-gen.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g dts-gen\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g <span class=\"token operator\">&lt;</span>module_needs_definition<span class=\"token operator\">></span>\ndts-gen -m <span class=\"token operator\">&lt;</span>module_needs_definition<span class=\"token operator\">></span></code></pre></div>\n<p>This will generate a skeleton for the definition.</p>\n<p>After that, you need to go through the original js repo and find out parameter types and return types to add exact data types rather than <code class=\"language-text\">any</code> type.</p>\n<p>as an example</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// stuff</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This makes more sense than the previous one</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// stuff</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In addition to that typing file should have this heading:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Type definitions for [LIBRARY NAME]\n// Project: [LIBRARY URL]\n// Definitions by: [AUTHOR NAME] &lt;[AUTHOR URL]&gt;\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped</code></pre></div>\n<h2 id=\"module-teststs\"><a href=\"#module-teststs\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>module-tests.ts</h2>\n<p>In this file, I recreated the original module functions usage to test it.</p>\n<p>As an example, Original module should work with </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">foo.work()</code></pre></div>\n<p>And so we add </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">foo.work() </code></pre></div>\n<p>In tests file and test.</p>\n<h2 id=\"tsconfigjson\"><a href=\"#tsconfigjson\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tsconfig.json</h2>\n<p>This a sample example of a config file.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n   <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"lib\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n           <span class=\"token string\">\"es6\"</span>\n       <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"noImplicitThis\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"strictNullChecks\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"strictFunctionTypes\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"../\"</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"typeRoots\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n           <span class=\"token string\">\"../\"</span>\n       <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"types\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"noEmit\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"forceConsistentCasingInFileNames\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token property\">\"files\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n       <span class=\"token string\">\"index.d.ts\"</span><span class=\"token punctuation\">,</span>\n       <span class=\"token string\">\"foo-tests.ts\"</span>\n   <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"tslintjson\"><a href=\"#tslintjson\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tslint.json</h2>\n<p>Add this in the file</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n   <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dtslint/dt.json\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So now we are ready to test our type definition.</p>\n<p>Run</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">tsc </code></pre></div>\n<p>To find whether your files compile correctly.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">run npm test </code></pre></div>\n<p>to run test</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm run lint &lt;package-name&gt; to lint our package</code></pre></div>\n<p>If everything seems fine.</p>\n<p>Do</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> add <span class=\"token keyword\">.</span>\n<span class=\"token function\">git</span> commit -m “add: <span class=\"token function\">type</span> definition <span class=\"token keyword\">for</span> <span class=\"token operator\">&lt;</span>module-name<span class=\"token operator\">></span>”\n<span class=\"token function\">git</span> push origin <span class=\"token operator\">&lt;</span>module-name<span class=\"token operator\">></span></code></pre></div>\n<p>Then you can make a PR from your repo to DefinetlyTyped repo and wait for a review. If you have done the typing correctly your contribution will be merged.</p>\n<p>Finally, Try to add as much as typing for the type definition since when another person is using your typings they can take more from your contribution. (Just don’t put it with bunch of <code class=\"language-text\">any</code> types)</p>\n<p>Hope this will help you!</p>\n<p>P.S: If you think something is missing in this post, feel free to ping me or contribute to this article by clicking <strong><em>Edit on GitHub</em></strong>.</p>","timeToRead":3,"frontmatter":{"title":"How to contribute to DefinitelyTyped in Github","date":"March 01, 2019","spoiler":"The one with Typescript Definition File"},"fields":{"slug":"/how-to-contribute-definitelytyped/","langKey":"en"}}},"pageContext":{"slug":"/how-to-contribute-definitelytyped/","previous":{"fields":{"slug":"/eeg-intro/","langKey":"en","directoryName":"eeg-intro"},"frontmatter":{"title":"EEG"}},"next":{"fields":{"slug":"/react-native-full-image-splash-screen/","langKey":"en","directoryName":"react-native-full-image-splash-screen"},"frontmatter":{"title":"How to add full image splash screen in React-Native"}},"translations":[],"translatedLinks":[]}}