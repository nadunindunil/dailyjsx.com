{"componentChunkName":"component---src-templates-blog-post-js","path":"/documentdb-tls-connect/","result":{"data":{"site":{"siteMetadata":{"title":"DailyJSX","author":"Nadun Indunil"}},"markdownRemark":{"id":"5cb35d6d-9d52-5c7c-8147-01df6a16036f","html":"<h2 id=\"problem-statement\"><a href=\"#problem-statement\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Problem statement</h2>\n<p>If you are trying to connect to an AWS DocumentDB using a secure connection, In Java spring-boot there are two possible scenarios we can follow,</p>\n<ul>\n<li>Create a certificate using the .pem file and use the certificate at the system property of the application start using <code class=\"language-text\">-Djavax.net.ssl.trustStore=&lt;path-to-cert> -Djavax.net.ssl.trustStorePassword=&lt;truststore-password></code> VM options.</li>\n<li>Create a certificate using the .pem file and use it as a system property within the java code itself. refer to: <a href=\"https://docs.aws.amazon.com/documentdb/latest/developerguide/connect_programmatically.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.aws.amazon.com/documentdb/latest/developerguide/connect_programmatically.html</a></li>\n</ul>\n<p>However, neither of the above would not work if you need to connect using TLS to a DocumentDB if it is executed in AWS Lambda. Lambda doesn’t expose this particular VM option to modify, even for the second approach it is complex to refer to a certificate in an S3 bucket (I couldn’t sort that out at the moment, please let me know if you have done the second approach)</p>\n<h2 id=\"solution\"><a href=\"#solution\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Solution</h2>\n<p>Considering all the facts, my final solution was downloading .pem file and converting it to a certificate as well as keeping that as a Keystore. All of the above should be done using the Lambda code.</p>\n<p>Please find the code below that can use as the MongoClientSettings config for your spring-boot application,</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mongodb<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MongoClientSettings</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span>mongo<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MongoProperties</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span>mongo<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MongoPropertiesClientSettingsBuilderCustomizer</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Environment</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span>ssl<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SSLContext</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span>ssl<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TrustManagerFactory</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">URL</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>cert<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Certificate</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>cert<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CertificateFactory</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MongoSSLConfig</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MongoClientSettings</span> <span class=\"token function\">mongoClientSettings</span><span class=\"token punctuation\">(</span>\n            <span class=\"token class-name\">MongoProperties</span> properties<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">Environment</span> environment\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">GeneralSecurityException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Declare path of trust store and create file</span>\n        <span class=\"token class-name\">String</span> trustStorePath <span class=\"token operator\">=</span> <span class=\"token string\">\"/tmp/trust\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// try creating above directory and path if you get error no such file</span>\n\n        <span class=\"token comment\">// Create Truststore using Key store api</span>\n        <span class=\"token class-name\">KeyStore</span> keyStore <span class=\"token operator\">=</span> <span class=\"token class-name\">KeyStore</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">KeyStore</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDefaultType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        keyStore<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Add Certificate to Key store</span>\n        <span class=\"token class-name\">CertificateFactory</span> certF <span class=\"token operator\">=</span> <span class=\"token class-name\">CertificateFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X.509\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// URL can pass as an env variable</span>\n        <span class=\"token class-name\">Certificate</span> cert <span class=\"token operator\">=</span> certF<span class=\"token punctuation\">.</span><span class=\"token function\">generateCertificate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://s3.amazonaws.com/rds-downloads/rds-ca-2019-root.pem\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">openStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        keyStore<span class=\"token punctuation\">.</span><span class=\"token function\">setCertificateEntry</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mongo-cert\"</span><span class=\"token punctuation\">,</span> cert<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Write Key Store</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FileOutputStream</span> out <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>trustStorePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            keyStore<span class=\"token punctuation\">.</span><span class=\"token function\">store</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> <span class=\"token string\">\"pass\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">TrustManagerFactory</span> trustManagerFactory <span class=\"token operator\">=</span> <span class=\"token class-name\">TrustManagerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TrustManagerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDefaultAlgorithm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        trustManagerFactory<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>keyStore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">SSLContext</span> sslContext <span class=\"token operator\">=</span> <span class=\"token class-name\">SSLContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TLS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sslContext<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> trustManagerFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getTrustManagers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SecureRandom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">MongoClientSettings<span class=\"token punctuation\">.</span>Builder</span> builder <span class=\"token operator\">=</span> <span class=\"token class-name\">MongoClientSettings</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">applyToSslSettings</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            b<span class=\"token punctuation\">.</span><span class=\"token function\">enabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            b<span class=\"token punctuation\">.</span><span class=\"token function\">context</span><span class=\"token punctuation\">(</span>sslContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">MongoPropertiesClientSettingsBuilderCustomizer</span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">,</span> environment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">customize</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","timeToRead":2,"frontmatter":{"title":"How to securely connect to an AWS DocumentDb using SpringBoot","date":"May 31, 2022","spoiler":"The one with dynamic TLS connection","author":"Nadun Indunil","tags":["AWS","springboot","documentdb"]},"fields":{"slug":"/documentdb-tls-connect/","langKey":"en"}}},"pageContext":{"slug":"/documentdb-tls-connect/","previous":{"fields":{"slug":"/static-website-pipeline/","langKey":"en","directoryName":"static-website-pipeline"},"frontmatter":{"title":"How to use AWS code pipeline to deploy a Static Website into S3","tags":["gatsby","AWS","react","S3"]}},"next":null,"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}